<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title><%= reportTitle %></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --bg-color: #f0f2f5;
      --text-color: #4a5568;
      --title-color: #1a202c;
      --card-bg: #ffffff;
      --border-color: #e2e8f0;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --primary-color: #2c5282;
      --primary-hover: #2a4365;
      --secondary-color: #4a5568;
      --secondary-hover: #2d3748;
    }

    body {
      font-family: 'Noto Sans JP', sans-serif;
      margin: 0;
      background-color: var(--bg-color);
      color: var(--text-color);
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
      padding: 40px;
      box-sizing: border-box;
    }

    .container {
      width: 100%;
      max-width: 900px;
    }

    header {
      margin-bottom: 60px;
      text-align: center;
      position: relative;
      padding-bottom: 20px;
    }

    header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 80px;
      height: 4px;
      background: linear-gradient(90deg, var(--primary-color), var(--primary-hover));
      border-radius: 2px;
    }

    header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin: 0 0 12px 0;
      background: linear-gradient(90deg, var(--primary-hover), var(--primary-color));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
    }

    .subtitle {
      font-size: 1.1rem;
      color: var(--text-color);
      margin: 0;
    }

    .section {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 32px;
      box-shadow: var(--shadow);
      margin-bottom: 30px;
    }

    .section h2 {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--title-color);
      margin-top: 0;
      margin-bottom: 24px;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--border-color);
    }
    
    ul {
      list-style: none;
      padding: 0;
    }

    li {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      padding: 20px 0;
      border-bottom: 1px solid var(--border-color);
    }

    li:last-child {
      border-bottom: none;
      padding-bottom: 0;
    }
    li:first-child {
      padding-top: 0;
    }

    li span {
      font-size: 1.1rem;
      font-weight: 500;
      color: var(--title-color);
      margin-right: 20px;
    }

    .button-group {
      display: flex;
      gap: 12px;
    }

    .button-group a {
      display: inline-block;
      padding: 10px 20px;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.2s ease-in-out;
      font-weight: 500;
      border: 1px solid transparent;
    }

    .button-group a:hover {
      transform: translateY(-2px);
      box-shadow: 0 7px 14px rgba(50, 50, 93, 0.1), 0 3px 6px rgba(0, 0, 0, 0.08);
    }

    .button-group a.download-pdf {
      background-color: var(--primary-color);
    }
    .button-group a.download-pdf:hover {
      background-color: var(--primary-hover);
    }

    .button-group a.view-html {
      background-color: transparent;
      color: var(--secondary-color);
      border-color: var(--border-color);
    }
    .button-group a.view-html:hover {
      background-color: var(--secondary-color);
      color: white;
    }

    .file-input-group {
      display: flex;
      align-items: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .file-input-group .button-group {
      margin-left: auto;
    }

    /* Toast Notification Styles */
    #toast-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .toast {
      background-color: #4CAF50; /* Green for success */
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      opacity: 0;
      transition: opacity 0.5s, transform 0.5s;
      transform: translateY(20px);
      min-width: 250px;
      text-align: center;
    }

    .toast.show {
      opacity: 1;
      transform: translateY(0);
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1><%= reportTitle %></h1>
      <p class="subtitle">表示したいレポートの形式（PDFまたはHTML）を選択してください。</p>
    </header>
    
    <div class="section file-upload-section">
      <h2>JSONファイル取り込み</h2>
      <div class="file-input-group">
        <label for="jsonFileInput" class="custom-file-upload">
          <input type="file" id="jsonFileInput" accept=".json" style="display: none;">
          <span class="upload-button">ファイルを選択して下さい</span>
        </label>
        <span id="filePathDisplay" class="file-path-display"></span>
        <div class="button-group">
          <a href="javascript:void(0);" id="importButton" class="download-pdf">取り込み</a>
        </div>
      </div>
    </div>

    <div class="section">
      <h2>全体のレポート</h2>
      <ul>
        <li>
          <span>全ドライバーのレポート</span>
          <div class="button-group">
            <a href="/download/all" class="download-pdf">PDFダウンロード</a>
            <a href="/reports/all" class="view-html" target="_blank">HTMLプレビュー</a>
          </div>
        </li>
      </ul>
    </div>

    <div class="section">
      <h2>個人のレポート</h2>
      <ul>
        <% drivers.forEach(function(driver) { %>
          <li>
            <span><%= driver.driverName %> (<%= driver.officeName %>)</span>
            <div class="button-group">
              <a href="/download/<%= driver.driverId %>" class="download-pdf" target="_blank">PDFダウンロード</a>
              <a href="/reports/<%= driver.driverId %>" class="view-html" target="_blank">HTMLプレビュー</a>
            </div>
          </li>
        <% }); %>
      </ul>
    </div>
  </div>
  </body>
  <div id="toast-container"></div>
  <script>
    function showToast(message, type = 'success') {
      const toastContainer = document.getElementById('toast-container');
      const toast = document.createElement('div');
      toast.classList.add('toast');
      if (type === 'error') {
        toast.style.backgroundColor = '#f44336'; // Red for error
      }
      toast.textContent = message;
      toastContainer.appendChild(toast);

      // Show toast
      setTimeout(() => {
        toast.classList.add('show');
      }, 100);

      // Hide toast after 3 seconds
      setTimeout(() => {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => {
          toast.remove();
        }, { once: true });
      }, 3000);
    }

    document.getElementById('jsonFileInput').addEventListener('change', function() {
      const filePathDisplay = document.getElementById('filePathDisplay');
      const uploadButton = document.querySelector('.custom-file-upload .upload-button'); // upload-buttonを取得
      if (this.files && this.files.length > 0) {
        filePathDisplay.textContent = ''; // filePathDisplayは常に空にする
        if (uploadButton) {
          uploadButton.textContent = this.files[0].name; // upload-buttonのテキストをファイル名に差し替え
        }

        // ファイルが選択されたら、その内容を読み込み、サーバーにPOSTする
        const file = this.files[0];
        const reader = new FileReader();

        reader.onload = function(e) {
          try {
            const jsonData = JSON.parse(e.target.result);
            // サーバーにJSONデータをPOST
            fetch('/upload-json-data', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(jsonData),
            })
            .then(response => response.json())
            .then(data => {
              showToast(data.message, 'success'); // トースト表示
              // トーストが表示されるのを待ってからページを再読み込み
              setTimeout(() => {
                window.location.reload();
              }, 3500); // トーストの表示時間（3秒）より少し長めに設定
            })
            .catch((error) => {
              console.error('Error:', error);
              showToast('JSONデータのアップロード中にエラーが発生しました。', 'error'); // トースト表示
              // エラーメッセージが表示されるのを待ってからページを再読み込み（任意）
              setTimeout(() => {
                window.location.reload();
              }, 3500); // トーストの表示時間より少し長めに設定
            });
          } catch (parseError) {
            showToast('選択されたファイルは有効なJSONではありません。', 'error'); // トースト表示
            console.error('JSON parse error:', parseError);
            // エラーメッセージが表示されるのを待ってからページを再読み込み（任意）
            setTimeout(() => {
              window.location.reload();
            }, 3500); // トーストの表示時間より少し長めに設定
          }
        };

        reader.readAsText(file); // ファイルをテキストとして読み込む

      } else {
        filePathDisplay.textContent = ''; // ファイルが選択されていない場合は空にする
        if (uploadButton) {
          uploadButton.textContent = 'ファイルを選択して下さい'; // デフォルトの文言に戻す
        }
      }
    });

    document.getElementById('importButton').addEventListener('click', function() {
      document.getElementById('jsonFileInput').click(); // ファイル選択ダイアログを開く
    });
  </script>
</body>
</html>