<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title><%= reportTitle %></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/report_links.css">
</head>
<body>
  <div class="container">
    <header>
      <h1><%= reportTitle %></h1>
      <p class="subtitle">PDFダウンロード: PDF形式でレポートをローカルPCに保存します。<br>HTMLプレビュー: ブラウザの別タブでレポートの内容を確認できます。</p>
    </header>
    
    <div class="section file-upload-section">
      <h2>JSONファイル取り込み</h2>
      <div class="file-input-group">
        <label for="jsonFileInput" class="custom-file-upload">
          <input type="file" id="jsonFileInput" accept=".json" style="display: none;">
          <span class="upload-button">ファイルを選択して下さい</span>
        </label>
        <span id="filePathDisplay" class="file-path-display"></span>
        <div class="button-group">
          <a href="javascript:void(0);" id="uploadButton" class="download-pdf">ファイル選択</a>
        </div>
      </div>
    </div>

    <div class="section">
      <h2>全体のレポート</h2>
      <ul>
        <li>
          <span>全ドライバーのレポート</span>
          <div class="button-group">
            <a href="/download/all<%= token ? ('?t=' + token) : '' %>" class="download-pdf">PDFダウンロード</a>
            <a href="/reports/all<%= token ? ('?t=' + token) : '' %>" class="view-html" target="_blank">HTMLプレビュー</a>
          </div>
        </li>
      </ul>
    </div>

    <div class="section">
      <h2>個人のレポート</h2>
      <ul id="individual-reports-list">
        <% drivers.forEach(function(driver) { %>
          <li>
            <span class="driver-label"><%= driver.driverName %> (<%= driver.officeName %>)</span>
            <div class="button-group">
              <a href="/download/<%= driver.driverId %><%= token ? ('?t=' + token) : '' %>" class="download-pdf">PDFダウンロード</a>
              <a href="/reports/<%= driver.driverId %><%= token ? ('?t=' + token) : '' %>" class="view-html" target="_blank">HTMLプレビュー</a>
            </div>
          </li>
        <% }); %>
      </ul>
    </div>
  </div>
  </body>
  <div id="toast-container"></div>
  <script>
    // サーバーレンダリング時のトークン。未設定時は空文字列
    let currentToken = <%- (token ? JSON.stringify(token) : '""') %>;
    function showToast(message, type = 'success') {
      const toastContainer = document.getElementById('toast-container');
      const toast = document.createElement('div');
      toast.classList.add('toast');
      if (type === 'error') {
        toast.style.backgroundColor = '#f44336'; // エラー時は赤背景
      }
      toast.textContent = message;
      toastContainer.appendChild(toast);

      // トーストを表示
      setTimeout(() => {
        toast.classList.add('show');
      }, 100);

      // 3秒後に非表示へ切り替え
      setTimeout(() => {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => {
          toast.remove();
        }, { once: true });
      }, 3000);
    }

    const fileInput = document.getElementById('jsonFileInput');
    const uploadButton = document.getElementById('uploadButton');
    const uploadLabel = document.querySelector('.custom-file-upload .upload-button');
    const customFileUpload = document.querySelector('.custom-file-upload');
    const individualReportsList = document.getElementById('individual-reports-list');
    const DEFAULT_UPLOAD_LABEL = 'ファイルを選択して下さい';

    // JSON文字列にパース可能か判定する
    const parseJsonSafely = (text) => {
      try {
        return JSON.parse(text);
      } catch (_) {
        return null;
      }
    };

    // driverId がJSONとして読み取れた場合、整形済みのJSON文字列にそろえる
    const stringifyId = (id) => {
      try {
        const parsed = JSON.parse(id);
        if (parsed && typeof parsed === 'object') {
          return JSON.stringify(parsed);
        }
      } catch (_) {}
      return id;
    };

    // driverId の重複を抽出する
    const findDuplicateDriverIds = (drivers = []) => {
      const seen = new Map();
      const duplicates = new Set();
      drivers.forEach(item => {
        const rawId = item && typeof item.driverId === 'string' ? item.driverId : null;
        const id = rawId ? stringifyId(rawId) : null;
        if (!id) return;
        if (seen.has(id)) {
          duplicates.add(id);
        } else {
          seen.set(id, true);
        }
      });
      return duplicates;
    };

    // ドライバー一覧を再描画
    function updateReportsList(drivers) {
      individualReportsList.innerHTML = ''; // 表示中のリストをリセット

      if (!drivers || drivers.length === 0) {
        const li = document.createElement('li');
        li.textContent = '表示するデータがありません。';
        individualReportsList.appendChild(li);
        return;
      }

      drivers.forEach(driver => {
        const li = document.createElement('li');
        const tSuffix = currentToken ? `?t=${currentToken}` : '';
        li.innerHTML = `
          <span class=\"driver-label\">${driver.driverName} (${driver.officeName})</span>
          <div class="button-group">
            <a href="/download/${driver.driverId}${tSuffix}" class="download-pdf">PDFダウンロード</a>
            <a href="/reports/${driver.driverId}${tSuffix}" class="view-html" target="_blank">HTMLプレビュー</a>
          </div>
        `;
        individualReportsList.appendChild(li);
      });
    }

    // ファイル選択ラベルを初期状態にする
    const setDefaultUploadLabel = () => {
      if (!uploadLabel) return;
      uploadLabel.textContent = DEFAULT_UPLOAD_LABEL;
    };

    // 選択ファイル名の表示と削除操作を更新する
    const updateFileSelectionDisplay = (fileName) => {
      if (!uploadLabel) return;
      uploadLabel.innerHTML = '';
      const deleteBtn = document.createElement('span');
      deleteBtn.textContent = '✖️';
      deleteBtn.style.cursor = 'pointer';
      deleteBtn.style.marginRight = '8px';
      deleteBtn.onclick = function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        fetch('/reset-json-data', { method: 'POST' })
          .then(res => res.json())
          .then(data => {
            showToast(data.message, 'success');
            setTimeout(() => { window.location.reload(); }, 1500);
          })
          .catch(err => {
            console.error('Error:', err);
            showToast('リセット中にエラーが発生しました。', 'error');
          });
      };
      const fileNameSpan = document.createElement('span');
      fileNameSpan.textContent = fileName;
      fileNameSpan.style.textDecoration = 'underline';
      uploadLabel.appendChild(deleteBtn);
      uploadLabel.appendChild(fileNameSpan);
    };

    // 一覧リンクにトークンを反映
    // ダウンロード/プレビューリンクのクエリにトークンを適用する
    const updateGlobalLinks = (tokenValue) => {
      const tokenSuffix = tokenValue ? `?t=${encodeURIComponent(tokenValue)}` : '';
      const allPdf = document.querySelector('a.download-pdf[href^="/download/all"]');
      if (allPdf) allPdf.href = `/download/all${tokenSuffix}`;
      const allHtml = document.querySelector('a.view-html[href^="/reports/all"]');
      if (allHtml) allHtml.href = `/reports/all${tokenSuffix}`;
    };

    // アップロード後のUI/リンク更新を一括で実行
    const handleUploadSuccess = (jsonData, fileName) => {
      fetch('/upload-json-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(jsonData),
      })
        .then(response => response.json())
        .then(data => {
          showToast(data.message, 'success');
          const tokenValue = data.token || '';
          currentToken = tokenValue;
          updateGlobalLinks(currentToken);
          updateReportsList(jsonData);
          updateFileSelectionDisplay(fileName);
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('JSONデータのアップロード中にエラーが発生しました。', 'error');
        });
    };

    // JSON形式と重複を確認した上でアップロード処理へ進む
    const processUploadedData = (jsonData, fileName) => {
      if (!Array.isArray(jsonData)) {
        showToast('不正な形式です。アップロードファイルの内容をご確認ください。', 'error');
        return;
      }
      const duplicates = findDuplicateDriverIds(jsonData);
      if (duplicates.size > 0) {
        const ids = Array.from(duplicates).join(',');
        showToast(`DriverIDが重複するデータが存在します。ID：${ids}`, 'error');
        return;
      }
      handleUploadSuccess(jsonData, fileName);
    };

    setDefaultUploadLabel();
    updateGlobalLinks(currentToken);

    fileInput.addEventListener('change', function() {
      if (!(this.files && this.files.length > 0)) return;

      const file = this.files[0];
      const fileName = file.name;
      const reader = new FileReader();

      reader.onload = function(e) {
        const jsonData = parseJsonSafely(e.target.result);
        if (!jsonData) {
          showToast('選択されたファイルは有効なJSONではありません。', 'error');
          console.error('JSON parse error');
          return;
        }
        processUploadedData(jsonData, fileName);
      };

      reader.readAsText(file);
    });

    // 「ファイル選択」ボタンはダイアログを直接開く
    uploadButton.addEventListener('click', function() {
      fileInput.click();
    });
    
    // テキスト部分をクリックしてもダイアログを開く
    customFileUpload.addEventListener('click', function(e) {
      if (e.target.textContent !== '✖️') {
        fileInput.click();
      }
    });
  </script>
</body>
</html>
