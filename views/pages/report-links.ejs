<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title><%= reportTitle %></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/report_links.css">
</head>
<body>
  <div class="container">
    <header>
      <h1><%= reportTitle %></h1>
      <p class="subtitle">PDFダウンロード: PDF形式でレポートをローカルPCに保存します。<br>HTMLプレビュー: ブラウザの別タブでレポートの内容を確認できます。</p>
    </header>
    
    <div class="section file-upload-section">
      <h2>JSONファイル取り込み</h2>
      <div class="file-input-group">
        <label for="jsonFileInput" class="custom-file-upload">
          <input type="file" id="jsonFileInput" accept=".json" style="display: none;">
          <span class="upload-button">ファイルを選択して下さい</span>
        </label>
        <span id="filePathDisplay" class="file-path-display"></span>
        <div class="button-group">
          <a href="javascript:void(0);" id="uploadButton" class="download-pdf">ファイル選択</a>
        </div>
      </div>
    </div>

    <div class="section">
      <h2>全体のレポート</h2>
      <ul>
        <li>
          <span>全ドライバーのレポート</span>
          <div class="button-group">
            <a href="/download/all<%= token ? ('?t=' + token) : '' %>" class="download-pdf">PDFダウンロード</a>
            <a href="/reports/all<%= token ? ('?t=' + token) : '' %>" class="view-html" target="_blank">HTMLプレビュー</a>
          </div>
        </li>
      </ul>
    </div>

    <div class="section">
      <h2>個人のレポート</h2>
      <ul id="individual-reports-list">
        <% drivers.forEach(function(driver) { %>
          <li>
            <span class="driver-label"><%= driver.driverName %> (<%= driver.officeName %>)</span>
            <div class="button-group">
              <a href="/download/<%= driver.driverId %><%= token ? ('?t=' + token) : '' %>" class="download-pdf">PDFダウンロード</a>
              <a href="/reports/<%= driver.driverId %><%= token ? ('?t=' + token) : '' %>" class="view-html" target="_blank">HTMLプレビュー</a>
            </div>
          </li>
        <% }); %>
      </ul>
    </div>
  </div>
  </body>
  <div id="toast-container"></div>
  <script>
    // Current URL token (from server render). Empty string if none.
    let currentToken = <%- (token ? JSON.stringify(token) : '""') %>;
    function showToast(message, type = 'success') {
      const toastContainer = document.getElementById('toast-container');
      const toast = document.createElement('div');
      toast.classList.add('toast');
      if (type === 'error') {
        toast.style.backgroundColor = '#f44336'; // Red for error
      }
      toast.textContent = message;
      toastContainer.appendChild(toast);

      // Show toast
      setTimeout(() => {
        toast.classList.add('show');
      }, 100);

      // Hide toast after 3 seconds
      setTimeout(() => {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => {
          toast.remove();
        }, { once: true });
      }, 3000);
    }

    const fileInput = document.getElementById('jsonFileInput');
    const uploadButton = document.getElementById('uploadButton');
    const uploadButtonSpan = document.querySelector('.custom-file-upload .upload-button');
    const customFileUpload = document.querySelector('.custom-file-upload');
    const individualReportsList = document.getElementById('individual-reports-list');

    function updateReportsList(drivers) {
      individualReportsList.innerHTML = ''; // Clear existing list

      if (!drivers || drivers.length === 0) {
        const li = document.createElement('li');
        li.textContent = '表示するデータがありません。';
        individualReportsList.appendChild(li);
        return;
      }

      drivers.forEach(driver => {
        const li = document.createElement('li');
        const tSuffix = currentToken ? `?t=${currentToken}` : '';
        li.innerHTML = `
          <span class=\"driver-label\">${driver.driverName} (${driver.officeName})</span>
          <div class="button-group">
            <a href="/download/${driver.driverId}${tSuffix}" class="download-pdf">PDFダウンロード</a>
            <a href="/reports/${driver.driverId}${tSuffix}" class="view-html" target="_blank">HTMLプレビュー</a>
          </div>
        `;
        individualReportsList.appendChild(li);
      });
    }

    fileInput.addEventListener('change', function() {
      if (this.files && this.files.length > 0) {
        const file = this.files[0];
        const fileName = file.name;
        const reader = new FileReader();

        reader.onload = function(e) {
          try {
        const jsonData = JSON.parse(e.target.result);

        if (!Array.isArray(jsonData)) {
          showToast('不正な形式です。アップロードファイルの内容をご確認ください。', 'error');
          return;
        }

        const stringifyId = (id) => {
          try {
            const parsed = JSON.parse(id);
            if (parsed && typeof parsed === 'object') {
              return JSON.stringify(parsed);
            }
          } catch (ignore) {}
          return id;
        };

        // Check duplicated driverIds before uploading
        const seen = new Map();
        const duplicates = new Set();
        jsonData.forEach(item => {
          const rawId = item && typeof item.driverId === 'string' ? item.driverId : null;
          const id = rawId ? stringifyId(rawId) : null;
          if (!id) return;
          if (seen.has(id)) {
            duplicates.add(id);
          } else {
            seen.set(id, true);
          }
        });
        if (duplicates.size > 0) {
          const ids = Array.from(duplicates).join(',');
          showToast(`DriverIDが重複するデータが存在します。ID：${ids}`, 'error');
          return;
        }

        // 1. Send data to server in the background
        fetch('/upload-json-data', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(jsonData),
            })
            .then(response => response.json())
            .then(data => {
              showToast(data.message, 'success');
              if (data.token) {
                currentToken = data.token;
                // Update "all" section links to include token
                const allPdf = document.querySelector('a.download-pdf[href^="/download/all"]');
                if (allPdf) allPdf.href = `/download/all?t=${encodeURIComponent(currentToken)}`;
                const allHtml = document.querySelector('a.view-html[href^="/reports/all"]');
                if (allHtml) allHtml.href = `/reports/all?t=${encodeURIComponent(currentToken)}`;
              }
              // Re-render individual list so that each link includes ?t=
              updateReportsList(jsonData);
            })
            .catch(error => {
              console.error('Error:', error);
              showToast('JSONデータのアップロード中にエラーが発生しました。', 'error');
            });

            // 2. Update the UI dynamically (moved after token assignment)

            // 3. Update the file selection display
            uploadButtonSpan.innerHTML = ''; // Clear existing content
            const deleteBtn = document.createElement('span');
            deleteBtn.textContent = '✖️';
            deleteBtn.style.cursor = 'pointer';
            deleteBtn.style.marginRight = '8px';
            deleteBtn.onclick = function(ev) {
              ev.preventDefault();
              ev.stopPropagation();
              fetch('/reset-json-data', { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                  showToast(data.message, 'success');
                  setTimeout(() => { window.location.reload(); }, 1500);
                })
                .catch(err => {
                  console.error('Error:', err);
                  showToast('リセット中にエラーが発生しました。', 'error');
                });
            };
            const fileNameSpan = document.createElement('span');
            fileNameSpan.textContent = fileName;
            fileNameSpan.style.textDecoration = 'underline';
            uploadButtonSpan.appendChild(deleteBtn);
            uploadButtonSpan.appendChild(fileNameSpan);

          } catch (parseError) {
            showToast('選択されたファイルは有効なJSONではありません。', 'error');
            console.error('JSON parse error:', parseError);
          }
        };
        reader.readAsText(file);
      }
    });

    // The "ファイル選択" button just opens the file dialog
    uploadButton.addEventListener('click', function() {
      fileInput.click();
    });
    
    // Also allow clicking the text area to open the dialog
    customFileUpload.addEventListener('click', function(e) {
      if (e.target.textContent !== '✖️') {
        fileInput.click();
      }
    });
  </script>
</body>
</html>
